#!/usr/bin/env bash
# Usage: algo-run elf flag_nodiff
set -o pipefail

info() {
  printf "\e[1;36m$*\e[m\n"
}

pass() {
  if [[ $# -eq 2 ]]; then
    local time="$1"
    shift
    printf "$time \e[1;32m$*\e[m\n"
  else
    printf "\e[1;32m$*\e[m\n"
  fi
}


warning() {
  printf "\e[1;33m$*\e[m\n"
}

error() {
  if [[ $# -eq 2 ]]; then
    local time="$1"
    shift
    printf "$time \e[1;31m$*\e[m\n"
  else
    printf "\e[1;31m$*\e[m\n"
  fi
}

trap_ctrlc () {
  error "Loop exists, see log file."
  exit 1
}

print_header() {
  echo "//-------------------------------------------------{#$*}-----//"
}

print_banner() {
  echo "--------------------------------------------------------{$*}---"
}

print_inp() {
  tot=$(cat $1 | wc -c)
  raw="$(cat $1)"
  if [[ tot -ge 200 ]]; then
    raw="$(echo "$raw" | head -c 200)......(too long ignored)......"
  fi
  echo "$raw"
}

handle_compre() {
  local i=$1
  local out=$2
  local rel=$3
  local inp=
  local out=
  echo "Input: "
  print_inp "$i"
  echo ""
  diff -y -W 90 "$rel" "$out"
  inp=$(cat "$i")
  out=$(cat "$out")
  rm -f *.rel *.inp *.out *.cmp
  echo "$out" > 0.rel
  echo "$inp" > 0.inp
  echo "$inp" > $(basename $PWD).in
}

parse_debug_time() {
  local raw=$(cat std_err.txt)
  local real=$(echo "$raw" | awk '/real/ {print NR}')
  local user=$(echo "$raw" | awk '/user/ {print NR}')
  local sys=$(echo "$raw" | awk '/sys/ {print NR}')
  if [[ "$((real + 1))" == "$user" && "$((real + 2))" == "$sys" ]]; then
    running_time=$(echo "$raw" | \
                   sed -n "$real,\$p" | \
                   tr '\t' ' ' | \
                   tr '\n' '@' | \
                   sed 's/@/ \/ /g')
    local debug=$((real - 1))
    debug_info=$(echo "$raw" | sed -n "1,$debug p")
  else
    error "Not expect to reache here"
    exit 1
  fi
}

# When press ctrl+c, it will call `trap_ctrlc`.
trap "trap_ctrlc" 2

target=$(basename $PWD)
# All inputs
inputs=$(ls *.inp | sort -g)
# File will be executed
elf=${1:-elf}
# Flag determines whether to apply diff operation
flag_nodiff=${3:-0}

# A flag indicates whether this runs others code.
flag_compare=0
if [[ "$elf" == "cmp" ]]; then
  flag_compare=1
  rm -f ./*.cmp
else
  rm -f ./*.out
fi

total_cnt=0
correct_cnt=0
for i in $inputs; do
  # Print input samples
  print_header "input ${i%.inp}"
  if [[ $flag_compare -eq 0 && $flag_nodiff -eq 0 ]]; then
    # If this is my code and I want to see diff status
    # echo "input: "
    print_inp "$i"
    print_banner "debug"
  fi

  # Naming
  if [[ $flag_compare -eq 1 ]]; then
    out="${i%.inp}".cmp
    rel="${i%.inp}".out
  else
    out="${i%.inp}".out
    rel="${i%.inp}".rel
  fi

  debug_info=
  running_time=
  if ! { bash -c "time ./$elf < $i"; } > "$out" 2>std_err.txt; then
    error "Runtime error, Check source code, Please :(-"
    exit 1
  fi
  parse_debug_time std_err.txt

  if [[ $flag_compare -eq 0 && $flag_nodiff -eq 0 ]]; then
    echo "$debug_info"
    print_banner "output"
    cat "$out"
  fi

  # Diff checking
  if [[ -e "$rel" && $flag_nodiff -eq 0 ]]; then
    total_cnt=$((total_cnt + 1))
    if diff -y "$out" "$rel" >> /dev/null 2>&1; then
      correct_cnt=$((correct_cnt + 1))
      pass "$running_time" "PASSED"
    else
      error "$running_time" "Failed"
      print_banner "diff"
      if [[ $flag_compare -eq 1 ]]; then
        # If we found any difference in comparison mode, exit immediately.
        handle_compre $i $out $rel
        exit 1
      elif [[ $flag_nodiff -eq 0 ]]; then
        diff -y -W 90 "$out" "$rel"
      fi
    fi
  elif [[ $flag_nodiff -eq 0 ]]; then
    error "$running_time" "Custom"
  fi
done
print_header "all finished"

if [[ $flag_nodiff -eq 0 ]]; then
  if [[ $correct_cnt -eq $total_cnt ]]; then
    pass "ALL CASES PASSED! :-)"
  else
    error "SOME CASES FAILED! )-:"
  fi
fi
