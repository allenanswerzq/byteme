#!/usr/bin/env bash
# Usage: algo-run elf flag_exectime flag_nodiff
set -o pipefail

info() {
  printf "\e[1;36m$*\e[m\n"
}

pass() {
  printf "\e[1;32m$*\e[m\n"
}

warning() {
  printf "\e[1;33m$*\e[m\n"
}

error() {
  printf "\e[1;31m$*\e[m\n"
}

trap_ctrlc () {
  error "Loop exists, see log file."
  exit 1
}

print_header() {
  echo "//-----------------------------------------------------{#$*}-----//"
}

print_banner() {
  echo "-----------------------------------------------------{$*}---"
}

print_inp() {
  tot=$(cat $1 | wc -c)
  raw="$(cat $1)"
  if [[ tot -ge 200 ]]; then
    raw="$(echo "$raw" | head -c 200)......(too long ignored)......"
  fi
  echo "$raw"
}

# When press ctrl+c, it will call `trap_ctrlc`.
trap "trap_ctrlc" 2

target=$(basename $PWD)
# All inputs
inputs=$(ls *.inp | sort -g)
# File will be executed
elf=${1:-elf}
# Flag determines whether to show running time info after executed
flag_exectime=${2:-0}
# Flag determines whether to apply diff operation
flag_nodiff=${3:-0}

# A flag indicates whether this runs others code.
flag_compare=0
if [[ "$elf" == "cmp" ]]; then
  flag_compare=1
  rm -f ./*.cmp
else
  rm -f ./*.out
fi

total_cnt=0
correct_cnt=0
for i in $inputs; do
  # Print input samples
  print_header "${i%.inp}"
  if [[ $flag_compare -eq 0 && $flag_nodiff -eq 0 ]]; then
    # If this is my code and I want to see diff status
    echo "input: "
    print_inp "$i"
    print_banner "debug"
  fi

  # Naming
  if [[ $flag_compare -eq 1 ]]; then
    out="${i%.inp}".cmp
    rel="${i%.inp}".out
  else
    out="${i%.inp}".out
    rel="${i%.inp}".rel
  fi

  # Execute
  if [[ $flag_exectime -eq 0 ]]; then
    cmd="./$elf < $i"
  else
    cmd="time ./$elf < $i"
  fi

  if [[ $flag_exectime -eq 0 ]]; then
    if ! { bash -c "$cmd"; } > "$out"; then
      error "Runtime error, Check source code, Please :(-"
      exit 1
    elif [[ $flag_compare -eq 0 && $flag_nodiff -eq 0 ]]; then
      print_banner "output"
      cat "$out"
    fi
  else
    if ! { bash -c "$cmd"; } > "$out" 2>time_info.txt; then
      error "Runtime error, Check source code, Please :(-"
      exit 1
    elif [[ $flag_compare -eq 0 && $flag_nodiff -eq 0 ]]; then
      print_banner "time"
      cat time_info.txt
    fi
    rm -f time_info.txt
  fi

  # Diff checking
  if [[ -e "$rel" && $flag_nodiff -eq 0 && $flag_exectime -eq 0 ]]; then
    total_cnt=$((total_cnt + 1))
    if diff -y "$out" "$rel" >> /dev/null 2>&1; then
      correct_cnt=$((correct_cnt + 1))
      pass "\\t\\t\\t\\t\\t\\tPassed"
    else
      error "\\t\\t\\t\\t\\t\\tFailed"
      print_banner "diff"
      if [[ $flag_compare -eq 1 ]]; then
        # If we found any difference in comparison mode, exit immediately.
        echo "Input: "
        print_inp "$i"
        echo ""
        diff -y -W 90 "$rel" "$out"
        inp=`cat "$i"`
        out=`cat "$out"`
        rm -f *.rel
        rm -f *.inp
        rm -f *.out
        rm -f *.cmp
        echo "$out" > 0.rel
        echo "$inp" > 0.inp
        echo "$inp" > `basename $PWD`.in
        exit 1
      elif [[ $flag_nodiff -eq 0 ]]; then
        diff -y -W 90 "$out" "$rel"
      fi
    fi
  elif [[ $flag_nodiff -eq 0 ]]; then
    error "\\t\\t\\t\\t\\t\\tCustom"
  fi
done
print_header ""

if [[ $flag_exectime -eq 0 && $flag_nodiff -eq 0 ]]; then
  if [[ $correct_cnt -eq $total_cnt ]]; then
    pass "ALL CASES PASSED! :-)"
  else
    error "SOME CASES FAILED! )-:"
  fi
fi
