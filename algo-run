#!/usr/bin/env bash
# Usage: algo-run elf res_name exec_time diff
set -o pipefail

esc=""
redf="${esc}[31m"
greenf="${esc}[32m"
boldon="${esc}[1m"
reset="${esc}[0m"

function trap_ctrlc () {
  echo "${boldon}${redf}Loop exists, see log file${reset}"
  exit 122
}

trap "trap_ctrlc" 2

inp="*.inp"
elf=${1:-elf}
exec_time=${3:-0}
nodiff=${4:-0}

# Clean old files
compare=0
if [[ "$elf" == "cmp" ]]; then
  compare=1
  rm -f ./*.cmp
else
  rm -f ./*.out
fi

total_cnt=0
correct_cnt=0
for i in $inp; do
  # Check input
  if ! [ -e "$i" ]; then
    echo "${boldon}${redf}Empty input${reset}"
    exit 123
  fi

  # Print input samples
  echo "//-----------------------------------------------------{#${i%.inp}}-----//"
  if [[ $compare -eq 0 && $nodiff -eq 0 ]]; then
    echo "input: "
    cat "$i"
    echo -e "-----------------------------------------------------{debug}---"
  fi

  # Naming
  if [[ $compare -eq 1 ]]; then
    out="${i%.inp}".cmp
    rel="${i%.inp}".out
  else
    out="${i%.inp}".out
    rel="${i%.inp}".rel
  fi

  # Execute
  if [[ $exec_time -eq 0 ]]; then
    cmd="./$elf < $i"
  else
    cmd="time ./$elf < $i"
  fi

  if [[ $exec_time -eq 0 ]]; then
    if ! { bash -c "$cmd"; } > "$out"; then
      echo "${boldon}${redf}Runtime error, Check source code, Please :(- ${reset}"
      exit 124
    elif [[ $compare -eq 0 && $nodiff -eq 0 ]]; then
      echo -e "----------------------------------------------------{output}---"
      cat "$out"
    fi
  else
    if ! { bash -c "$cmd"; } > "$out" 2>time_info.txt; then
      echo "${boldon}${redf}Runtime error, Check source code, Please :(- ${reset}"
      exit 124
    elif [[ $compare -eq 0 && $nodiff -eq 0 ]]; then
      echo -e "---------------------------------------------------{time}------"
      cat time_info.txt
    fi
    rm -f time_info.txt
  fi
  # Diff checking
  if [[ -e "$rel" && $nodiff -eq 0 && $exec_time -eq 0 ]]; then
    total_cnt=$((total_cnt + 1))
    if diff -y "$out" "$rel" >> /dev/null 2>&1; then
      correct_cnt=$((correct_cnt + 1))
      echo -e "\\t\\t\\t\\t\\t\\t${boldon}${greenf}Passed${reset}"
    else
      echo -e "\\t\\t\\t\\t\\t\\t${boldon}${redf}Failed${reset}"
      echo -e "------------------------------------------------------{diff}---"
      if [ $compare -eq 1 ]; then
        # If we found any different in comparison mode, exit immediately.
        echo "Input: "
        cat "$i"
        echo ""
        diff -y -W 90 "$rel" "$out"
        inp=`cat "$i"`
        out=`cat "$out"`
        rm -f *.rel
        rm -f *.inp
        rm -f *.out
        rm -f *.cmp
        echo "$out" > 0.rel
        echo "$inp" > 0.inp
        echo "$inp" > `basename $PWD`.in
        exit 124
      elif [[ $nodiff -eq 0 ]]; then
        diff -y -W 90 "$out" "$rel"
      fi
    fi
  elif [[ $nodiff -eq 0 ]]; then
    echo -e "\\t\\t\\t\\t\\t\\t${boldon}${redf}Custom${reset}"
  fi
  # rm -f $i $out
done
echo "//-------------------------------------------------------------//"

if [[ $compare -eq 1 ]]; then
  if [[ $correct_cnt -eq $total_cnt ]]; then
    echo "${boldon}${greenf}ALL PASSED! :-)${reset}"
  else
    echo "${boldon}${redf}SOME FAILED! )-: ${reset}"
  fi
fi
